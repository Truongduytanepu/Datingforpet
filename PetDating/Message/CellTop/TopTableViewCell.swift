//
//  TopTableViewCell.swift
//  PetDating
//
//  Created by Tr∆∞∆°ng Duy T√¢n on 17/08/2023.
//

import UIKit
import FirebaseDatabase
import FirebaseAuth

class TopTableViewCell: UITableViewCell {
    
    @IBOutlet weak var collectionView: UICollectionView!
    let userRef = Database.database().reference()
    var matchIds: [String] = [] // Danh s√°ch c√°c matchIds
    var matchedUsers: [UserBot] = [] // Danh s√°ch c√°c ng∆∞·ªùi d√πng ƒë√£ match
    var currentUserID = Auth.auth().currentUser?.uid // ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
    weak var messageViewController: MessageViewController?
    
    override func awakeFromNib() {
        super.awakeFromNib()
        collectionView.delegate = self
        collectionView.dataSource = self
        
        // ƒêƒÉng k√Ω UICollectionViewCell cho identifier
        collectionView.register(UINib(nibName: "TopCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "TopCollectionViewCell")
        
        if let layout = collectionView.collectionViewLayout as? UICollectionViewFlowLayout {
            layout.scrollDirection = .horizontal
            layout.itemSize = CGSize(width: 100, height: collectionView.frame.size.height)
        }
    }
    
    override func setSelected(_ selected: Bool, animated: Bool) {
        super.setSelected(selected, animated: animated)
        // Configure the view for the selected state
    }
    
    // H√†m n√†y ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch matchIds t·ª´ b√™n ngo√†i
    func updateMatchIds(_ matchIds: [String], currentUserID: String?) {
        self.matchIds = matchIds
        self.currentUserID = currentUserID
        // Sau khi c·∫≠p nh·∫≠t danh s√°ch matchIds, g·ªçi h√†m ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ matchIds
        fetchMatchedUsers()
    }
    func fetchMatchedUsers() {
        let userMatchIdsRef = userRef.child("user").child(currentUserID!)
        
        userMatchIdsRef.observeSingleEvent(of: .value) { [weak self] (snapshot) in
            if let matchIdsDict = snapshot.value as? [String: Any],
               let matchIdsArray = matchIdsDict["matchIds"] as? [String] {
                print("üòå\(matchIdsArray)")
                
                var processedMatchIdsCount = 0 // S·ªë l∆∞·ª£ng matchId ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
                var uniqueMatchedUsers: [UserBot] = [] // Danh s√°ch ng∆∞·ªùi d√πng ƒë√£ match, lo·∫°i b·ªè c√°c b·∫£n sao
                
                // L·∫∑p qua danh s√°ch matchIds
                for matchId in matchIdsArray {
                    // Truy v·∫•n th√¥ng tin ng∆∞·ªùi d√πng t·ª´ matchId
                    self?.userRef.child("user").child(matchId).observeSingleEvent(of: .value) { (userSnapshot) in
                        if let userDict = userSnapshot.value as? [String: Any] {
                            if let name = userDict["name"] as? String,
                               let image = userDict["image"] as? String {
                                let user = UserBot(uid: matchId, name: name, image: image)
                                
                                // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i trong danh s√°ch hay ch∆∞a
                                if !uniqueMatchedUsers.contains(where: { $0.uid == user.uid }) {
                                    uniqueMatchedUsers.append(user)
                                }
                                
                                // TƒÉng s·ªë l∆∞·ª£ng matchId ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
                                processedMatchIdsCount += 1
                                
                                // Ki·ªÉm tra xem ƒë√£ x·ª≠ l√Ω t·∫•t c·∫£ c√°c matchId ch∆∞a
                                if processedMatchIdsCount == matchIdsArray.count {
                                    // Sau khi ƒë√£ x·ª≠ l√Ω t·∫•t c·∫£ c√°c matchId, c·∫≠p nh·∫≠t giao di·ªán
                                    self?.matchedUsers = uniqueMatchedUsers
                                    self?.collectionView.reloadData()
                                }
                            }
                        } else {
                            // X·ª≠ l√Ω l·ªói n·∫øu truy v·∫•n kh√¥ng th√†nh c√¥ng
                            print("Error fetching user data for matchId: \(matchId)")
                            
                            // TƒÉng s·ªë l∆∞·ª£ng matchId ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
                            processedMatchIdsCount += 1
                            
                            // Ki·ªÉm tra xem ƒë√£ x·ª≠ l√Ω t·∫•t c·∫£ c√°c matchId ch∆∞a
                            if processedMatchIdsCount == matchIdsArray.count {
                                // Sau khi ƒë√£ x·ª≠ l√Ω t·∫•t c·∫£ c√°c matchId, c·∫≠p nh·∫≠t giao di·ªán
                                self?.matchedUsers = uniqueMatchedUsers
                                self?.collectionView.reloadData()
                            }
                        }
                    }
                }
            } else {
                // X·ª≠ l√Ω l·ªói n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch matchIds
                print("Error fetching matchIds")
            }
        }
    }
}
extension TopTableViewCell: UICollectionViewDelegate, UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return matchedUsers.count // S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng ƒë√£ match
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "TopCollectionViewCell", for: indexPath) as! TopCollectionViewCell
        
        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ danh s√°ch matchedUsers
        let user = matchedUsers[indexPath.item]
        
        cell.nameLbl.text = user.name
        
        if let imageURL = URL(string: user.image) {
            cell.userImage.kf.setImage(with: imageURL)
        }
        
        return cell
    }
}
