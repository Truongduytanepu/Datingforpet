//
//  ChatViewController.swift
//  PetDating
//
//  Created by Tr∆∞∆°ng Duy T√¢n on 17/08/2023.
//

import UIKit
import MessageKit
import FirebaseAuth
import FirebaseDatabase
import InputBarAccessoryView
import MessageInputBar

struct MockMessage: MessageType {
    var sender: SenderType
    var messageId: String
    var sentDate: Date
    var kind: MessageKind
    
    init(text: String, sender: SenderType, messageId: String, date: Date) {
        self.sender = sender
        self.messageId = messageId
        self.sentDate = date
        self.kind = .text(text)
    }
}

class ChatViewController: MessagesViewController {
    
    
    var messages: [MessageType] = []
    var matchId: String = ""
    let currentUser = Auth.auth().currentUser?.uid
    
    override func viewDidLoad() {
        super.viewDidLoad()
        observeMessages()
        navigationController?.isNavigationBarHidden = false
        setUpNavigation()
        messagesCollectionView.messagesDataSource = self
        messagesCollectionView.messagesLayoutDelegate = self
        messagesCollectionView.messagesDisplayDelegate = self
        messageInputBar.delegate = self
        
        // Reload d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã tin nh·∫Øn
        messagesCollectionView.reloadData()
        print("‚ù§Ô∏è \(matchId)")
    }
    
    func observeMessages() {
        guard let currentUser = currentUser, !matchId.isEmpty else {
            return
        }
        
        let databaseRef = Database.database().reference()
        
        // S·ª≠ d·ª•ng matchId ƒë·ªÉ x√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë·∫øn tin nh·∫Øn c·ªßa tr·∫≠n ƒë·∫•u n√†y
        let messagesRef = databaseRef.child("matches").child(matchId).child("messages")
        
        // L·∫Øng nghe s·ª± thay ƒë·ªïi khi c√≥ b·∫•t k·ª≥ thay ƒë·ªïi n√†o trong "messages"
        messagesRef.observe(.value) { [weak self] snapshot, error in
            guard let self = self else { return }
            
            if let error = error {
                print("Error observing messages: \(error)")
                return
            }
            
            if let messagesData = snapshot.value as? [String: [String: Any]] {
                // X√≥a d·ªØ li·ªáu c≈© trong m·∫£ng tin nh·∫Øn
                self.messages.removeAll()
                
                for (messageId, messageData) in messagesData {
                    if let senderId = messageData["sender"] as? String,
                       let text = messageData["content"] as? String,
                       let timestampString = messageData["timestamp"] as? String {
                        
                        // Th·ª≠ chuy·ªÉn ƒë·ªïi timestampString th√†nh TimeInterval
                        if let sentDate = self.convertTimestampStringToTimeInterval(timestampString) {
                            let sender = Sender(senderId: senderId, displayName: senderId)
                            let message = MockMessage(text: text, sender: sender, messageId: messageId, date: sentDate)
                            
                            // Th√™m tin nh·∫Øn v√†o m·∫£ng
                            self.messages.append(message)
                            print(sentDate)
                        } else {
                            // X·ª≠ l√Ω l·ªói n·∫øu kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi timestampString th√†nh TimeInterval
                            print("Invalid timestamp format: \(timestampString)")
                        }
                    }
                }
                
                // C·∫≠p nh·∫≠t giao di·ªán sau khi ƒë√£ l·∫•y t·∫•t c·∫£ tin nh·∫Øn
                self.messages.sort(by: { $0.sentDate < $1.sentDate })
                self.messagesCollectionView.reloadData()
            }
        }
    }
    
    func sendMessage(_ messageText: String) {
        guard !messageText.isEmpty else {
            return
        }
        
        // T·∫°o m·ªôt dictionary ƒë·ªÉ bi·ªÉu di·ªÖn tin nh·∫Øn m·ªõi
        let messageData: [String: Any] = [
            "sender": currentSender().senderId,
            "content": messageText,
            "timestamp": Date().iso8601String // S·ª≠ d·ª•ng m·ªôt h√†m m·ªü r·ªông ƒë·ªÉ chuy·ªÉn ƒë·ªïi th·ªùi gian th√†nh chu·ªói ƒë·ªãnh d·∫°ng ISO 8601
        ]
        
        let databaseRef = Database.database().reference()
        
        // S·ª≠ d·ª•ng matchId ƒë·ªÉ x√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë·∫øn tr·∫≠n ƒë·∫•u c·ª• th·ªÉ
        let matchMessagesRef = databaseRef.child("matches").child(matchId).child("messages")
        
        // Th√™m tin nh·∫Øn v√†o c∆° s·ªü d·ªØ li·ªáu
        let newMessageRef = matchMessagesRef.childByAutoId()
        newMessageRef.setValue(messageData)
        
        // T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng Message t·ª´ messageData v√† th√™m n√≥ v√†o m·∫£ng messages
        if let senderId = messageData["sender"] as? String,
           let text = messageData["content"] as? String,
           let timestampString = messageData["timestamp"] as? String,
           let sentDate = self.convertTimestampStringToTimeInterval(timestampString) {
            let sender = Sender(senderId: senderId, displayName: senderId)
            let message = MockMessage(text: text, sender: sender, messageId: newMessageRef.key ?? "", date: sentDate)
            
            self.messages.append(message)
            self.messages.sort(by: { $0.sentDate < $1.sentDate })
        }
        
        // Reload the messages collection view to display the new message
        self.messagesCollectionView.reloadData()
    }
    
    func convertTimestampStringToTimeInterval(_ timestampString: String) -> Date? {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
        
        return dateFormatter.date(from: timestampString)
    }
    
    func setUpNavigation(){
        // Custom back navigation
        let backImage = UIImage(named: "back")
        self.navigationController?.navigationBar.backIndicatorImage = backImage
        self.navigationController?.navigationBar.backIndicatorTransitionMaskImage = backImage
        self.navigationController?.navigationBar.backItem?.title = ""
    }
}

extension ChatViewController: MessagesDataSource{
    
    func currentSender() -> SenderType {
        if let currentUser = Auth.auth().currentUser?.uid {
            // X√°c ƒë·ªãnh ng∆∞·ªùi g·ª≠i tin nh·∫Øn
            if currentUser == self.currentUser {
                // N·∫øu l√† ng∆∞·ªùi d√πng hi·ªán t·∫°i, hi·ªÉn th·ªã b√™n ph·∫£i
                return Sender(senderId: currentUser, displayName: "Your Display Name")
            } else {
                // Hi·ªÉn th·ªã b√™n tr√°i cho ng∆∞·ªùi d√πng ƒë∆∞·ª£c nh·∫≠n
                return Sender(senderId: "otherUserId", displayName: "Other User's Display Name")
            }
        } else {
            return Sender(senderId: "unknown", displayName: "Unknown")
        }
    }
    
    func messageForItem(at indexPath: IndexPath, in messagesCollectionView: MessageKit.MessagesCollectionView) -> MessageKit.MessageType {
        return messages[indexPath.section]
    }
    
    func numberOfSections(in messagesCollectionView: MessageKit.MessagesCollectionView) -> Int {
        return messages.count
    }
}

extension ChatViewController: MessagesLayoutDelegate, MessagesDisplayDelegate {
    
}

extension Date {
    var iso8601String: String {
        let dateFormatter = ISO8601DateFormatter()
        return dateFormatter.string(from: self)
    }
}

extension ChatViewController: InputBarAccessoryViewDelegate{
    func inputBar(_ inputBar: InputBarAccessoryView, didPressSendButtonWith text: String) {
        // X·ª≠ l√Ω vi·ªác g·ª≠i tin nh·∫Øn ·ªü ƒë√¢y, v√≠ d·ª•:
        sendMessage(text)
        inputBar.inputTextView.text = ""
        // X√≥a n·ªôi dung trong tr∆∞·ªùng nh·∫≠p sau khi g·ª≠i
        
        print("üî¥ Send button pressed with text: \(text)")
    }
    
    func inputBar(_ inputBar: InputBarAccessoryView, didChangeIntrinsicContentTo size: CGSize) {
        // X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi k√≠ch th∆∞·ªõc giao di·ªán t·∫°i ƒë√¢y
    }
    
    func inputBar(_ inputBar: InputBarAccessoryView, textViewTextDidChangeTo text: String) {
        // X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi n·ªôi dung c·ªßa tr∆∞·ªùng nh·∫≠p t·∫°i ƒë√¢y
    }
    
    func inputBar(_ inputBar: InputBarAccessoryView, didSwipeTextViewWith gesture: UISwipeGestureRecognizer) {
        // X·ª≠ l√Ω s·ª± ki·ªán vu·ªët tr∆∞·ªùng nh·∫≠p t·∫°i ƒë√¢y (n·∫øu c·∫ßn)
    }
}
